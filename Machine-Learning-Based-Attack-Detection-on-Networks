import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time
import re
with open("/kaggle/input/kdd-cup-1999-data/kddcup.names", 'r') as f:
    print(f.read())

#----------------------

cols ="""duration,
protocol_type,
service,
flag,
src_bytes,
dst_bytes,
land,
wrong_fragment,
urgent,
hot,
num_failed_logins,
logged_in,
num_compromised,
root_shell,
su_attempted,
num_root,
num_file_creations,
num_shells,
num_access_files,
num_outbound_cmds,
is_host_login,
is_guest_login,
count,
srv_count,
serror_rate,
srv_serror_rate,
rerror_rate,
srv_rerror_rate,
same_srv_rate,
diff_srv_rate,
srv_diff_host_rate,
dst_host_count,
dst_host_srv_count,
dst_host_same_srv_rate,
dst_host_diff_srv_rate,
dst_host_same_src_port_rate,
dst_host_srv_diff_host_rate,
dst_host_serror_rate,
dst_host_srv_serror_rate,
dst_host_rerror_rate,
dst_host_srv_rerror_rate"""
  
columns =[]
for c in cols.split(','):
    if(c.strip()):
       columns.append(c.strip())
  
columns.append('target')
print(len(columns))


#----------------------

with open("/kaggle/input/kdd-cup-1999-data/training_attack_types", 'r') as f:
    print(f.read())

#----------------------

attacks_types = {
    'normal': 'normal',
'back': 'dos',
'buffer_overflow': 'u2r',
'ftp_write': 'r2l',
'guess_passwd': 'r2l',
'imap': 'r2l',
'ipsweep': 'probe',
'land': 'dos',
'loadmodule': 'u2r',
'multihop': 'r2l',
'neptune': 'dos',
'nmap': 'probe',
'perl': 'u2r',
'phf': 'r2l',
'pod': 'dos',
'portsweep': 'probe',
'rootkit': 'u2r',
'satan': 'probe',
'smurf': 'dos',
'spy': 'r2l',
'teardrop': 'dos',
'warezclient': 'r2l',
'warezmaster': 'r2l',
}


#----------------------

path = "/kaggle/input/kdd-cup-1999-data/kddcup.data_10_percent.gz"
df = pd.read_csv(path, names = columns)
df['Attack Type'] = df.target.apply(lambda r:attacks_types[r[:-1]])
df.head()

#----------------------

df.shape

#----------------------

df.isnull().sum()

#----------------------

num_cols = df._get_numeric_data().columns
  
cate_cols = list(set(df.columns)-set(num_cols))
cate_cols.remove('target')
cate_cols.remove('Attack Type')
  
cate_cols

#----------------------

df = df.dropna('columns')
  
df = df[[col for col in df if df[col].nunique() > 1]]
  
corr = df.corr()
  
plt.figure(figsize =(15, 12))
  
sns.heatmap(corr)
  
plt.show()

#----------------------

# Bu değişken, num_compromised ile yüksek oranda ilişkilidir ve analiz için dikkate alınmamalıdır.
#(Korelasyon = 0,9938277978738366)
df.drop('num_root', axis = 1, inplace = True)
  
# Bu değişken, serror_rate ile yüksek oranda ilişkilidir ve analiz için dikkate alınmamalıdır.
#(Korelasyon = 0,9983615072725952)
df.drop('srv_serror_rate', axis = 1, inplace = True)
  
# Bu değişken, rerror_rate ile yüksek oranda ilişkilidir ve analiz için dikkate alınmamalıdır.
#(Korelasyon = 0,9947309539817937)
df.drop('srv_rerror_rate', axis = 1, inplace = True)
  
# Bu değişken, srv_serror_rate ile yüksek oranda ilişkilidir ve analiz için dikkate alınmamalıdır.
#(Korelasyon = 0,9993041091850098)
df.drop('dst_host_srv_serror_rate', axis = 1, inplace = True)
  
# Bu değişken, rerror_rate ile yüksek oranda ilişkilidir ve analiz için dikkate alınmamalıdır.
#(Korelasyon = 0,9869947924956001)
df.drop('dst_host_serror_rate', axis = 1, inplace = True)
  
# Bu değişken, srv_rerror_rate ile yüksek oranda ilişkilidir ve analiz için dikkate alınmamalıdır.
#(Korelasyon = 0,9821663427308375)
df.drop('dst_host_rerror_rate', axis = 1, inplace = True)
  
# Bu değişken, rerror_rate ile yüksek oranda ilişkilidir ve analiz için dikkate alınmamalıdır.
#(Korelasyon = 0,9851995540751249)
df.drop('dst_host_srv_rerror_rate', axis = 1, inplace = True)
  
# Bu değişken, srv_rerror_rate ile yüksek oranda ilişkilidir ve analiz için dikkate alınmamalıdır.
#(Korelasyon = 0,9865705438845669)
df.drop('dst_host_same_srv_rate', axis = 1, inplace = True)

#----------------------

pmap = {'icmp':0, 'tcp':1, 'udp':2}
df['protocol_type'] = df['protocol_type'].map(pmap)

#----------------------

fmap = {'SF':0, 'S0':1, 'REJ':2, 'RSTR':3, 'RSTO':4, 'SH':5, 'S1':6, 'S2':7, 'RSTOS0':8, 'S3':9, 'OTH':10}
df['flag'] = df['flag'].map(fmap)

#----------------------

df.drop('service', axis = 1, inplace = True)

#----------------------

df.shape

#----------------------

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

#----------------------

df = df.drop(['target', ], axis = 1)
print(df.shape)
  

y = df[['Attack Type']]
X = df.drop(['Attack Type', ], axis = 1)

sc = MinMaxScaler()
X = sc.fit_transform(X)

# Split test and train data 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)

print(X_train.shape, X_test.shape)
print(y_train.shape, y_test.shape)
 

#----------------------

#Gauss Naive Bayes'in Python uygulaması
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
  
clfg = GaussianNB()
start_time = time.time()
clfg.fit(X_train, y_train.values.ravel())
end_time = time.time()
print("Training time: ", end_time-start_time)


start_time = time.time()
y_test_pred = clfg.predict(X_train)
end_time = time.time()
print("Testing time: ", end_time-start_time)



print("Train score is:", clfg.score(X_train, y_train))
print("Test score is:", clfg.score(X_test, y_test))


import numpy as num
import matplotlib.pyplot as plot

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay

start_time = time.time()
title_options = [
    ("Confusion matrix, without normalization", None),
    ("Normalized confusion matrix", "true"),
]
for title, normalize in title_options:
    display = ConfusionMatrixDisplay.from_estimator(
        clfg,
        X_test,
        y_test,
        cmap=plot.cm.Blues,
        normalize=normalize,
    )
    display.ax_.set_title(title)
    print(title)
    print(display.confusion_matrix)

plot.show()
end_time = time.time()
print("Testing time: ", end_time-start_time)

#----------------------

#Karar Ağacının Python uygulaması:

from sklearn.tree import DecisionTreeClassifier
  
clfd = DecisionTreeClassifier(criterion ="entropy", max_depth = 4)
start_time = time.time()
clfd.fit(X_train, y_train.values.ravel())
end_time = time.time()
print("Training time: ", end_time-start_time)


start_time = time.time()
y_test_pred = clfd.predict(X_train)
end_time = time.time()
print("Testing time: ", end_time-start_time)


print("Train score is:", clfd.score(X_train, y_train))
print("Test score is:", clfd.score(X_test, y_test))



import numpy as num
import matplotlib.pyplot as plot

from sklearn.tree import DecisionTreeClassifier
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay

start_time = time.time()
title_options = [
    ("Confusion matrix, without normalization", None),
    ("Normalized confusion matrix", "true"),
]
for title, normalize in title_options:
    display = ConfusionMatrixDisplay.from_estimator(
        clfd,
        X_test,
        y_test,
        cmap=plot.cm.Blues,
        normalize=normalize,
    )
    display.ax_.set_title(title)
    print(title)
    print(display.confusion_matrix)

plot.show()
end_time = time.time()
print("Testing time: ", end_time-start_time)

#----------------------

#Random Forest Python uygulaması:

from sklearn.ensemble import RandomForestClassifier
  
clfr = RandomForestClassifier(n_estimators = 30)
start_time = time.time()
clfr.fit(X_train, y_train.values.ravel())
end_time = time.time()
print("Training time: ", end_time-start_time)
 

start_time = time.time()
y_test_pred = clfr.predict(X_train)
end_time = time.time()
print("Testing time: ", end_time-start_time)



print("Train score is:", clfr.score(X_train, y_train))
print("Test score is:", clfr.score(X_test, y_test))




import numpy as num
import matplotlib.pyplot as plot

from sklearn.ensemble import RandomForestClassifier
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay

start_time = time.time()
title_options = [
    ("Confusion matrix, without normalization", None),
    ("Normalized confusion matrix", "true"),
]
for title, normalize in title_options:
    display = ConfusionMatrixDisplay.from_estimator(
        clfr,
        X_test,
        y_test,
        cmap=plot.cm.Blues,
        normalize=normalize,
    )
    display.ax_.set_title(title)
    print(title)
    print(display.confusion_matrix)

plot.show()
end_time = time.time()
print("Testing time: ", end_time-start_time)

#----------------------

#SVM Python uygulaması:

from sklearn.svm import SVC
  
clfs = SVC(gamma = 'scale')
start_time = time.time()
clfs.fit(X_train, y_train.values.ravel())
end_time = time.time()
print("Training time: ", end_time-start_time)


start_time = time.time()
y_test_pred = clfs.predict(X_train)
end_time = time.time()
print("Testing time: ", end_time-start_time)



print("Train score is:", clfs.score(X_train, y_train))
print("Test score is:", clfs.score(X_test, y_test))



import numpy as num
import matplotlib.pyplot as plot

from sklearn import svm, datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay

start_time = time.time()
y_test_pred = clfs.predict(X_train)
title_options = [
    ("Confusion matrix, without normalization", None),
    ("Normalized confusion matrix", "true"),
]
for title, normalize in title_options:
    display = ConfusionMatrixDisplay.from_estimator(
        clfs,
        X_test,
        y_test,
        cmap=plot.cm.Blues,
        normalize=normalize,
    )
    display.ax_.set_title(title)
    print(title)
    print(display.confusion_matrix)

plot.show()
end_time = time.time()
print("Testing time: ", end_time-start_time)

#----------------------

#Logistic Regression Python uygulaması:

from sklearn.linear_model import LogisticRegression
  
clfl = LogisticRegression(max_iter = 1200000)
start_time = time.time()
clfl.fit(X_train, y_train.values.ravel())
end_time = time.time()
print("Training time: ", end_time-start_time)
 

start_time = time.time()
y_test_pred = clfl.predict(X_train)
end_time = time.time()
print("Testing time: ", end_time-start_time)
 


print("Train score is:", clfl.score(X_train, y_train))
print("Test score is:", clfl.score(X_test, y_test))
 


import numpy as num
import matplotlib.pyplot as plot

from sklearn.linear_model import LogisticRegression
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay

start_time = time.time()
title_options = [
    ("Confusion matrix, without normalization", None),
    ("Normalized confusion matrix", "true"),
]
for title, normalize in title_options:
    display = ConfusionMatrixDisplay.from_estimator(
        clfl,
        X_test,
        y_test,
        cmap=plot.cm.Blues,
        normalize=normalize,
    )
    display.ax_.set_title(title)
    print(title)
    print(display.confusion_matrix)

plot.show()
end_time = time.time()
print("Testing time: ", end_time-start_time)

#----------------------

#Gradient Boosting Python uygulaması:

from sklearn.ensemble import GradientBoostingClassifier
  
clfg = GradientBoostingClassifier(random_state = 0)
start_time = time.time()
clfg.fit(X_train, y_train.values.ravel())
end_time = time.time()
print("Training time: ", end_time-start_time)



start_time = time.time()
y_test_pred = clfg.predict(X_train)
end_time = time.time()
print("Testing time: ", end_time-start_time)



print("Train score is:", clfg.score(X_train, y_train))
print("Test score is:", clfg.score(X_test, y_test))



import numpy as num
import matplotlib.pyplot as plot

from sklearn.ensemble import GradientBoostingClassifier
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay

start_time = time.time()
title_options = [
    ("Confusion matrix, without normalization", None),
    ("Normalized confusion matrix", "true"),
]
for title, normalize in title_options:
    display = ConfusionMatrixDisplay.from_estimator(
        clfg,
        X_test,
        y_test,
        cmap=plot.cm.Blues,
        normalize=normalize,
    )
    display.ax_.set_title(title)
    print(title)
    print(display.confusion_matrix)

plot.show()
end_time = time.time()
print("Testing time: ", end_time-start_time)

#----------------------

#K Neighbors Classifier Python uygulaması:

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 5)   
start_time = time.time()
classifier.fit(X_train, y_train.values.ravel())
end_time = time.time()
print("Training time: ", end_time-start_time)



start_time = time.time()
y_test_pred = classifier.predict(X_train)
end_time = time.time()
print("Testing time: ", end_time-start_time)


print("Train score is:", classifier.score(X_train, y_train))
print("Test score is:", classifier.score(X_test, y_test))



import numpy as num
import matplotlib.pyplot as plot

from sklearn.neighbors import KNeighborsClassifier
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay

start_time = time.time()
title_options = [
    ("Confusion matrix, without normalization", None),
    ("Normalized confusion matrix", "true"),
]
for title, normalize in title_options:
    display = ConfusionMatrixDisplay.from_estimator(
        classifier,
        X_test,
        y_test,
        cmap=plot.cm.Blues,
        normalize=normalize,
    )
    display.ax_.set_title(title)
    print(title)
    print(display.confusion_matrix)

plot.show()
end_time = time.time()
print("Testing time: ", end_time-start_time)

#----------------------

#Her modelin eğitim doğruluğunu analiz edin

names = ['NB', 'DT', 'RF', 'SVM', 'LR', 'GB', 'KN']
values = [87.903, 99.052, 99.969, 99.879, 99.352, 99.771, 99.901]
f = plt.figure(figsize =(15, 3), num = 10)
plt.subplot(131)
plt.bar(names, values)

#----------------------

#Her modelin eğitim süresini analiz edin

names = ['NB', 'DT', 'RF', 'SVM', 'LR', 'GB','KN']
values = [0.44355, 1.27334, 10.54408, 129.59001, 42.44105, 286.97405, 0.30827]
f = plt.figure(figsize =(15, 3), num = 10)
plt.subplot(131)
plt.bar(names, values)

#----------------------

#Her modelin çalışma süresini test edin

names = ['NB', 'DT', 'RF', 'SVM', 'LR', 'GB','KN']
values = [0.27460, 0.02818, 0.75650, 96.03755, 0.03145, 1.77911, 1524.39209]
f = plt.figure(figsize =(15, 3), num = 10)
plt.subplot(131)
plt.bar(names, values)
